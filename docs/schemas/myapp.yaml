openapi: 3.0.2
info:
  version: 1.0.0
  title: 'django-jsonapi-training example'
  description: >-
    ![alt-text](https://cuit.columbia.edu/sites/default/files/logo/CUIT_Logo_286_web.jpg "CUIT logo")


    A sample API that uses courses as an example to demonstrate representing
    [JSON:API 1.0](http://jsonapi.org/format) in the OpenAPI 3.0 specification.


    See [https://columbia-it-django-jsonapi-training.readthedocs.io](https://columbia-it-django-jsonapi-training.readthedocs.io)
    for more about this.


    Copyright &copy; 2019 The Trustees of [Columbia University](https://www.columbia.edu) in the City of New York.

#  To externalize jsonapi.yaml, replace `./jsonapi.yaml` with `http://www.columbia.edu/~alan/schemas/common/jsonapi.yaml`.
#  But, more likely you'll just want to bundle this with: `swagger-ui-watcher -b myapp.json myapp.yaml`.
  contact:
    name: Alan Crosswell
    email: alan@columbia.edu
    url: 'http://www.columbia.edu/~alan'
  license:
    name: Apache 2.0 License
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:8000/v1'
    description: backend dev server (default port with Django)
  - url: 'http://api.company.com:8000/v1/'
    description: dev API gateway
  - url: 'http://localhost:9123/v1'
    description: backend dev server when using API gateway
tags:
  - name: courses
    description: Courses of study (really individual classes)
    externalDocs:
      url: https://opendataservice.columbia.edu/course-information
      description: loosely based on this (out of date) information
  - name: course_terms
    description: "Instances of a course (really class): year and semester"
paths:
  /courses/:
    get:
      description: Returns a collection of courses
      operationId: find courses
      tags: [courses]
      security:
        - basicAuth: []
        - oauth-dev: [auth-columbia, read]
        - oauth-test: [auth-columbia, read]
        - oauth: [auth-columbia, read]
      parameters:
        # I wish I could pull all these in at once...
        - $ref: './jsonapi.yaml#/components/parameters/include'
        - $ref: './jsonapi.yaml#/components/parameters/sort'
        - $ref: './jsonapi.yaml#/components/parameters/pageSize'
        - $ref: './jsonapi.yaml#/components/parameters/pageNumber'
        # unable to generically represent filter and fields so have to enumerate them here.
        - name: 'fields[courses]'
          in: query
          description: 'Sparse Fieldsets: return only the specified course fields'
          required: false
          style: form
          schema:
            type: string
        - name: 'fields[course_terms]'
          in: query
          description: 'Sparse Fieldsets: return only the specified course fields'
          required: false
          style: form
          schema:
            type: string
        # Keyword searches are across these fields:
        # search_fields = ('course_name', 'course_description', 'course_identifier', 'course_number')
        - name: 'filter[search]'
          in: query
          description: keyword search across course_name, course_description, course_identifier, course_number
          required: false
          style: form
          schema:
            type: string
        # enumerate ever single filterset: easy to automate, boring to type by hand;-)
        # usual_rels = ('exact', 'lt', 'gt', 'gte', 'lte', 'in')
        # text_rels = ('icontains', 'iexact', 'contains')
        # 'id': usual_rels,
        - name: 'filter[id]'
          in: query
          description: exact id
          required: false
          style: form
          schema:
            # use an exact schema match here...
            $ref: './jsonapi.yaml#/components/schemas/id'
        - name: 'filter[id.gte]'
          in: query
          description: id greater-than or equal
          required: false
          style: form
          schema:
            # ... but here allow a free-form string for relationship matches
            type: string
        - name: 'filter[id.lte]'
          in: query
          description: id less-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[id.lt]'
          in: query
          description: id less-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[id.gt]'
          in: query
          description: id greater-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[id.in]'
          in: query
          description: id in list
          required: false
          style: form
          schema:
            type: string
        # 'course_name': ('exact', ) + text_rels,
        - name: 'filter[course_name]'
          in: query
          description: exact course_name
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/course_name'
        - name: 'filter[course_name.iexact]'
          in: query
          description: case independent exact course_name 
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/course_name'
        - name: 'filter[course_name.contains]'
          in: query
          description: course_name contains
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_name.icontains]'
          in: query
          description: course_name case independent contains
          required: false
          style: form
          schema:
            type: string
        # 'subject_area_code': usual_rels,
        - name: 'filter[subject_area_code]'
          in: query
          description: subject_area_code equals
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/subject_area_code'
        - name: 'filter[subject_area_code.gte]'
          in: query
          description: subject_area_code greater-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[subject_area_code.lte]'
          in: query
          description: subject_area_code less-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[subject_area_code.lt]'
          in: query
          description: subject_area_code less-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[subject_area_code.gt]'
          in: query
          description: subject_area_code greater-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[subject_area_code.in]'
          in: query
          description: subject_area_code in list
          required: false
          style: form
          schema:
            type: string
        # 'course_description': text_rels + usual_rels,
        - name: 'filter[course_description]'
          in: query
          description: course_description equals
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/course_description'
        - name: 'filter[course_description.gte]'
          in: query
          description: course_description greater-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.lte]'
          in: query
          description: course_description less-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.lt]'
          in: query
          description: course_description less-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.gt]'
          in: query
          description: course_description greater-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.in]'
          in: query
          description: course_description in list
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.iexact]'
          in: query
          description: course_description case independent exact match
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.contains]'
          in: query
          description: course_description contains
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_description.icontains]'
          in: query
          description: course_description case independent contains
          required: false
          style: form
          schema:
            type: string
        # 'course_identifier': text_rels + usual_rels,
        - name: 'filter[course_identifier]'
          in: query
          description: course_identifier equals
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/course_identifier'
        - name: 'filter[course_identifier.gte]'
          in: query
          description: course_identifier greater-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.lte]'
          in: query
          description: course_identifier less-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.lt]'
          in: query
          description: course_identifier less-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.gt]'
          in: query
          description: course_identifier greater-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.in]'
          in: query
          description: course_identifier in list
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.iexact]'
          in: query
          description: course_identifier case independent exact match
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.contains]'
          in: query
          description: course_identifier contains
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_identifier.icontains]'
          in: query
          description: course_identifier case independent contains
          required: false
          style: form
          schema:
            type: string
        # 'course_number': ('exact', ),
        - name: 'filter[course_number]'
          in: query
          description: course_number
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/course_number'
        # 'course_terms__term_identifier': usual_rels,
        - name: 'filter[course_terms.term_identifier]'
          in: query
          description: course_terms.term_identifier equals
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseTermAttributes/properties/term_identifier'
        - name: 'filter[course_terms.term_identifier.gte]'
          in: query
          description: course_terms.term_identifier greater-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_terms.term_identifier.lte]'
          in: query
          description: course_terms.term_identifier less-than or equal
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_terms.term_identifier.lt]'
          in: query
          description: course_terms.term_identifier less-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_terms.term_identifier.gt]'
          in: query
          description: course_terms.term_identifier greater-than
          required: false
          style: form
          schema:
            type: string
        - name: 'filter[course_terms.term_identifier.in]'
          in: query
          description: course_terms.term_identifier in list
          required: false
          style: form
          schema:
            type: string
        # 'school_bulletin_prefix_code': ('exact', 'regex'),
        - name: 'filter[school_bulletin_prefix_code]'
          in: query
          description: exact school_bulletin_prefix_code
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CourseAttributes/properties/school_bulletin_prefix_code'
        - name: 'filter[school_bulletin_prefix_code.regex]'
          in: query
          description: >-
            regex match school_bulletin_prefix_code.
            Use `filter[school_bulletin_prefix_code.regex]=^$` to find empty codes.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: GET /courses response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CourseCollection'
        '401':
          description: not authorized
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/failure'
        '403':
          description: not permitted
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/failure'
        '404':
          description: "[Not found](https://jsonapi.org/format/#fetching-resources-responses-404)"
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/failure'
        default:
          description: other response
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/JSONAPIresponse'
    post:
      description: "[add](https://jsonapi.org/format/#crud-creating) a new course to courses collection"
      operationId: post course
      tags: [courses]
      security:
        - basicAuth: []
        - oauth-dev: [auth-columbia, demo-netphone-admin, create]
        - oauth-test: [auth-columbia, demo-netphone-admin, create]
        - oauth: [auth-columbia, demo-netphone-admin, create]
      requestBody:
        description: post new course
        content:
          'application/vnd.api+json':
            schema:
              $ref: '#/components/schemas/CourseItemPost'
      responses:
        '201':
          description: >-
            [Created](https://jsonapi.org/format/#crud-creating-responses-201).
            Assigned `id` and/or any other changes are in this response.
          content:
            'application/vnd.api+json':
              schema:
                $ref: '#/components/schemas/CourseItemData'
          headers:
            Location:
              description: Url of newly-created course
              schema:
                type: string
                format: uri-reference
        '202':
          description: >-
            Accepted for [asynchronous processing](https://jsonapi.org/recommendations/#asynchronous-processing).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/datum'
          headers:
            Content-Location:
              description: URL for status of processing
              schema:
                type: string
                format: uri-reference
        # my app does not allow posting the `id`
        # '204':
        #   description: >-
        #     [Created](https://jsonapi.org/format/#crud-creating-responses-204) with the supplied `id`.
        #     No other changes from what was POSTed.
        '403':
          description: "[Forbidden](https://jsonapi.org/format/#crud-creating-responses-403)"
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        '404':
          description: >-
            [Related resource does not exist](https://jsonapi.org/format/#crud-creating-responses-404).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        '409':
          description: "[Conflict](https://jsonapi.org/format/#crud-creating-responses-409)"
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        default:
          description: other post response
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/JSONAPIresponse'
  '/courses/{id}/':
    parameters:
      - name: id
        in: path
        description: ID of course to fetch
        required: true
        schema:
          type: string
    get:
      description: Returns a single course
      operationId: return course by id
      tags: [courses]
      security:
        - basicAuth: []
        - oauth-dev: [auth-columbia, read]
        - oauth-test: [auth-columbia, read]
        - oauth: [auth-columbia, read]
      responses:
        '200':
          description: course response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CourseItemData'
        '404':
          description: "[Not found](https://jsonapi.org/format/#fetching-resources-responses-404)"
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/failure'
        default:
          description: get item response
          content:
            application/vnd.api+json:
              schema:
                $ref: './jsonapi.yaml#/components/schemas/JSONAPIresponse'
    patch:
      description: "[update](https://jsonapi.org/format/#crud-updating) a course"
      operationId: patch course
      tags: [courses]
      security:
        - basicAuth: []
        - oauth-dev: [auth-columbia, demo-netphone-admin, update]
        - oauth-test: [auth-columbia, demo-netphone-admin, update]
        - oauth: [auth-columbia, demo-netphone-admin, update]
      requestBody:
        description: course data to patch. Only supply fields you want to change.
        content:
          'application/vnd.api+json':
            schema:
              $ref: '#/components/schemas/CourseItemPatch'
      responses:
        '200':
          description: "[OK](https://jsonapi.org/format/#crud-updating-responses-200)"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CourseItemData'
        '202':
          description: >-
            Accepted for [asynchronous processing](https://jsonapi.org/recommendations/#asynchronous-processing).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/datum'
          headers:
            Content-Location:
              description: URL for status of processing
              schema:
                type: string
                format: uri-reference
        '204':
          description: >-
            [Patched](https://jsonapi.org/format/#crud-updating-responses-204).
            No other changes from what was PATCHed.
        '403':
          description: "[Forbidden](https://jsonapi.org/format/#crud-updating-responses-403)"
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        '404':
          description: >-
            [Resource does not exist](https://jsonapi.org/format/#crud-updating-responses-404).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        '409':
          description: "[Conflict](https://jsonapi.org/format/#crud-updating-responses-409)"
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
        default:
          description: get item response
          content:
            application/vnd.api+json:
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/JSONAPIresponse'
    delete:
      description: "[delete](https://jsonapi.org/format/#crud-deleting) an item"
      operationId: delete item
      tags: [courses]
      security:
        - basicAuth: []
        - oauth-dev: [auth-columbia, demo-netphone-admin, delete]
        - oauth-test: [auth-columbia, demo-netphone-admin, delete]
        - oauth: [auth-columbia, demo-netphone-admin, delete]
      responses:
        '200':
          description: "[OK](https://jsonapi.org/format/#crud-deleting-responses-200)"
          content:
            application/vnd.api+json:
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/onlymeta'
        '202':
          description: >-
            Accepted for [asynchronous processing](https://jsonapi.org/recommendations/#asynchronous-processing).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/datum'
        '204':
          description: >-
            [Deleted](https://jsonapi.org/format/#crud-deleting-responses-204).
        '404':
          description: >-
            [Resource does not exist](https://jsonapi.org/format/#crud-deleting-responses-404).
          content:
            'application/vnd.api+json':
              schema:
                $ref: 'jsonapi.yaml#/components/schemas/failure'
  # '/courses/{id}/relationships/{related_field}':
  #   parameters:
  #     - name: id
  #       in: path
  #       description: ID of course to fetch
  #       required: true
  #       schema:
  #         type: string
  #     - name: related_field
  #       in: path
  #       description: related field to fetch
  #       required: true
  #       schema:
  #         type: string
  #         enum: ['course_terms']
  #   get:
  #     description: Returns a single course's course_term relationships
  #     responses:
  #       '200':
  #         description: course relationship response
  #         content:
  #           application/vnd.api+json:
  #             schema:
  #               $ref: './jsonapi.yaml#/components/schemas/relationships'
  # # decide if using {related_field} makes sense here given the response schema will be different.
  # '/courses/{id}/{related_field}':
  #   parameters:
  #     - name: id
  #       in: path
  #       description: ID of course to fetch
  #       required: true
  #       schema:
  #         type: string
  #     - name: related_field
  #       in: path
  #       description: related field to fetch
  #       required: true
  #       schema:
  #         type: string
  #         enum: ['course_terms']
  #   get:
  #     description: Return returns the course_terms for this course.
  #     responses:
  #       '200':
  #         description: course relationship response
  #         content:
  #           application/vnd.api+json:
  #             schema:
  #               $ref: './jsonapi.yaml#/components/schemas/relationships'
  # /courses_terms/:
  #   get:
  #     description: Returns a collection of course terms
  #     operationId: find course terms
  #     parameters:
  #       - name: sort
  #         in: query
  #         description: fields to sort by
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: 'fields[course_terms]'
  #         in: query
  #         description: 'Sparse Fieldsets: return only the specified course fields'
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: course term response
  #         content:
  #           application/vnd.api+json:
  #             schema:
  #               $ref: '#/components/schemas/CourseTermCollection'
  # '/course_terms/{id}/':
  #   get:
  #     description: Returns a single course term
  #     operationId: return course term by id
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of course term to fetch
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: course term response
  #         content:
  #           application/vnd.api+json:
  #             schema:
  #               $ref: '#/components/schemas/CourseTermItem'
  # '/course_terms/{id}/relationships/course':
  #   get:
  #     description: Returns a single term's related course
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of term to fetch
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: course relationship response
  #         content:
  #           application/vnd.api+json:
  #             schema:
  #               $ref: './jsonapi.yaml#/components/schemas/relationships'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    oauth-test:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://oauth-test.cc.columbia.edu/as/authorization.oauth2
          tokenUrl: https://oauth-test.cc.columbia.edu/as/token.oauth2
          scopes:
            "auth-columbia": Columbia UNI login
            create: create
            read: read
            update: update
            delete: delete
            openid: disclose your identity
            profile: your user profile
            email: your email address
            https://api.columbia.edu/scope/group: groups you are a member of
            "demo-netphone-admin": Administrative access to netphone resources
    oauth-dev:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://oauth-dev.cuit.columbia.edu:8443/as/authorization.oauth2
          tokenUrl: https://oauth-dev.cuit.columbia.edu:8443/as/token.oauth2
          scopes:
            "auth-columbia": Columbia UNI login
            create: create
            read: read
            update: update
            delete: delete
            openid: disclose your identity
            profile: your user profile
            email: your email address
            https://api.columbia.edu/scope/group: groups you are a member of
            "demo-netphone-admin": Administrative access to netphone resources
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.cc.columbia.edu/as/authorization.oauth2
          tokenUrl: https://oauth.cc.columbia.edu/as/token.oauth2
          scopes:
            "auth-columbia": Columbia UNI login
            create: create
            read: read
            update: update
            delete: delete
            openid: disclose your identity
            profile: your user profile
            email: your email address
            https://api.columbia.edu/scope/group: groups you are a member of
            "demo-netphone-admin": Administrative access to netphone resources
  schemas:
    # basic model defintions
    Course:
      description: A course of instruction. e.g. COMSW1002 Computing in Context
      allOf:
        - $ref: '#/components/schemas/CommonAttributes'
        - $ref: '#/components/schemas/CourseAttributes'
    CourseNoRequired:
      description: A course with no required attributes, for PATCHing.
      allOf:
        - $ref: '#/components/schemas/CommonAttributes'
        - $ref: '#/components/schemas/CourseAttributesNoRequired'
    CourseRelationships:
      description: The Course's relationships
      type: object
      properties:
        course_terms:
          description: A given Course can appear in many CourseTerms.
          type: object
          properties:
              links:
                $ref: "jsonapi.yaml#/components/schemas/relationshipLinks"
              data:
                $ref: "jsonapi.yaml#/components/schemas/relationshipToMany"
              meta:
                $ref: "jsonapi.yaml#/components/schemas/meta"
      additionalProperties: false
    CourseTerm:
      description: A term (semester) instance of a course of instruction. e.g. 20181COMSW1002
      allOf:
        - $ref: '#/components/schemas/CommonAttributes'
        - $ref: '#/components/schemas/CourseTermAttributes'
    CourseTermRelationships:
      description: The CourseTerms's relationships
      type: object
      properties:
        course:
          description: Only one Course is the parent of this CourseTerm instance
          type: object
          properties:
              links:
                $ref: "jsonapi.yaml#/components/schemas/relationshipLinks"
              data:
                $ref: "jsonapi.yaml#/components/schemas/relationshipToOne"
              meta:
                $ref: "jsonapi.yaml#/components/schemas/meta"
      additionalProperties: false
    # not strictly necessary to split the common attributes out here just because they are an abstract model...
    CommonAttributes:
      description: Attributes common to all our schemas.
      type: object
      properties:
        effective_start_date:
          type: string
        effective_end_date:
          type: string
        last_mod_user_name:
          type: string
        last_mod_date:
          type: string
      # these are added by the server so are not required of the client here:
      # required:
      #   - last_mod_user_name
      #   - last_mod_date
    CourseAttributes:
      description: Course attributes, in addition to the Common attributes, define a `Course`
      type: object
      properties:
        school_bulletin_prefix_code:
          type: string
          maxLength: 10
        suffix_two:
          type: string
          maxLength: 2
        subject_area_code:
          type: string
          maxLength: 10
        course_number:
          type: string
          maxLength: 10
        course_identifier:
          type: string
          maxLength: 10
          uniqueItems: true
          pattern: "[A-Z]{5}[0-9]{5}"
        course_name:
          type: string
          maxLength: 80
        course_description:
          type: string
      required:
        - school_bulletin_prefix_code
        - subject_area_code
        - suffix_two
        - course_name
        - course_number
        - course_identifier
    CourseAttributesNoRequired:
      description: UGH duplicated Course attributes, in addition to the Common attributes, define a `Course`
      type: object
      properties:
        school_bulletin_prefix_code:
          type: string
          maxLength: 10
        suffix_two:
          type: string
          maxLength: 2
        subject_area_code:
          type: string
          maxLength: 10
        course_number:
          type: string
          maxLength: 10
        course_identifier:
          type: string
          maxLength: 10
          uniqueItems: true
          pattern: "[A-Z]{5}[0-9]{5}"
        course_name:
          type: string
          maxLength: 80
        course_description:
          type: string
    CourseTermAttributes:
      description: CourseTerm attributes, in addition to the Common attributes, define a `CourseTerm`
      type: object
      properties:
        term_identifier:
          type: string
          maxLength: 14
          description: "example: 20181ACCT7022B"
          pattern: "[0-9]{4}[123][A-Z]{4}[0-9]{4}[A-Z]"
        audit_permitted_code:
          type: integer
          minimum: 0
          default: 0
        exam_credit_flag:
          type: boolean
          default: true
    # these are the various request/response schemas that are composed of the above fundamental schemas:
    # get /courses success response. Do I really have to copy all this stuff vs. $ref success? Probably.
    CourseCollection:
      description: "GET /courses response: A collection of Course Items and other optional data."
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CourseItem'
        included:
          type: array
          items:
            $ref: "./jsonapi.yaml#/components/schemas/resource"
          uniqueItems: true
        links:
          description: Link members related to the primary data.
          allOf:
            - $ref: "./jsonapi.yaml#/components/schemas/links"
            - $ref: "./jsonapi.yaml#/components/schemas/pagination"
        jsonapi:
          $ref: "./jsonapi.yaml#/components/schemas/jsonapi"
      additionalProperties: false
    CourseItem:
      description: "A Course resource: type, id, attributes, relationships, links, etc."
      allOf:
        - $ref: './jsonapi.yaml#/components/schemas/resource'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/Course'
            relationships:
              $ref: '#/components/schemas/CourseRelationships'
    CourseItemNoID:
      description: "A CourseItem with no required `id` since it is system-generated."
      allOf:
        - $ref: './jsonapi.yaml#/components/schemas/post_resource'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/Course'
            relationships:
              $ref: '#/components/schemas/CourseRelationships'
    CourseItemNoRequired:
      description: "A CourseItem with no required attributes, for PATCHing."
      allOf:
        - $ref: './jsonapi.yaml#/components/schemas/resource'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/CourseNoRequired'
            relationships:
              $ref: '#/components/schemas/CourseRelationships'
    CourseItemPost:
      description: >-
        singular course being [created](https://jsonapi.org/format/#crud-creating).
        `id` is ignored if supplied and created by the system.
      properties:
        data:
          $ref: "#/components/schemas/CourseItemNoID"
    CourseItemPatch:
      description: >-
        singular course being [updated](https://jsonapi.org/format/#crud-updating).
      properties:
        data:
          $ref: "#/components/schemas/CourseItemNoRequired"
    CourseItemData:
      description: >-
        singular top-level course item data
      properties:
        data:
          $ref: "#/components/schemas/CourseItem"
    CourseTermCollection:
      description: "GET /course_terms response: A collection of CourseTerm items and other optional data."
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CourseTermItem'
        included:
          type: array
          items:
            $ref: "./jsonapi.yaml#/components/schemas/resource"
          uniqueItems: true
        links:
          description: Link members related to the primary data.
          allOf:
            - $ref: "./jsonapi.yaml#/components/schemas/links"
            - $ref: "./jsonapi.yaml#/components/schemas/pagination"
        jsonapi:
          $ref: "./jsonapi.yaml#/components/schemas/jsonapi"
      additionalProperties: false
    CourseTermItem:
      allOf:
        - $ref: './jsonapi.yaml#/components/schemas/resource'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/CourseTerm'
            relationships:
              $ref: '#/components/schemas/CourseTermRelationships'
    CourseTermItemNoID:
      allOf:
        - $ref: './jsonapi.yaml#/components/schemas/post_resource'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/CourseTerm'
            relationships:
              $ref: '#/components/schemas/CourseTermRelationships'
    CourseTermItemPost:
      description: >-
        singular course_term being [created](https://jsonapi.org/format/#crud-creating).
        `id` is ignored if supplied and created by the system.
      properties:
        data:
          $ref: "#/components/schemas/CourseTermItemNoID"
    CourseTermItemData:
      description: >-
        singular top-level course_term item data
      properties:
        data:
          $ref: "#/components/schemas/CourseTermItem"
